# -*- coding: utf-8 -*-
import tkinter as tk
import tkinter.font
from tkinter.filedialog import askopenfilename  
from tkinter.messagebox import showinfo
import time
from DejoMAT_functionality import static_analysis, dynamic_analysis, dynamicke_spracovanie, predict
    
# rodicovska trieda vsetkych obrazoviek
class DejoMAT(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.geometry("1280x720+300+180") # Nastavenie rozmerov a polohy okna
        self._frame = None
        self.switch_frame(StartingScreen) # Inicializacia uvodnej obrazovky
        self.title("Dejo Malware Analysis Tool") # Nastavenie nadpisu
        self._filepath = None # filepath bude nastaveny neskor 

    def switch_frame(self, specific_frame):
        new_frame = specific_frame(self) # Inicializacia volanej triedy
        if self._frame is not None: 
            self._frame.destroy()   # Zmazanie potencialne existujuceho ramu
        self._frame = new_frame
        self._frame.pack()          # Vykreslenie ramu so vsetkymi komponentmi
        
    def wait_until(self, file_name, timeout, period):
        mustend = time.time() + timeout
        while time.time() < mustend:   # cakame, pokial do danej premennej
            if file_name: return True  # bude nieco zapisane, respektive
            time.sleep(period)         # zmeni svoju hodnotu na True
            return False
        return False
    
    def wait_until_dynamic(self, file_name, timeout, period):
        mustend = time.time() + timeout
        while time.time() < mustend:   # cakame, az pokial
            if len(file_name) == 110:  # nebudeme mat zaznamenanych
                return True            # vsetkych 110 vlastnosti 
            time.sleep(period)
            return False
        return False
        
# Uvodna obrazovka zobrazena pri spusteni
class StartingScreen(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        label1 = tk.Label(self, text="Welcome to DEJOMAT", 
                          font=('Calibri', 18, "bold")) # Napis reprezentujuci nadpis obrazovky
        label1.pack(side="top", fill="x", pady=5)   
        label2 = tk.Label(self, text="You may analyse any suspicious ELF executable file in your computer!", 
                          font=('Calibri', 12))         # Napis opisujuci dalsi krok pouzivatela
        label2.pack(side="top", fill="x", pady=(8, 12))
        label3 = tk.Label(self, text="After performing an analysis, we will classify the file as either benign or malware.", 
                          font=('Calibri', 12))         # Napis opisujuci postup programu
        label3.pack(side="top", fill="x", pady=(0,15))
        button1 = tk.Button(self, text="Choose file", command=lambda:master.switch_frame(FileChosenScreen), 
                            font=('Calibri', 12))       # Tlacidlo na spustenie volby suboru
        button1.pack(side="left", pady=15, padx=(170, 40))
        button2 = tk.Button(self, text="Quit", command=lambda:master.destroy(),  
                            font=('Calibri', 12))       # Tlacidlo na vypnutie aplikacie
        button2.pack(side="left", pady=15, padx=60)


class FileChosenScreen(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        filepath = askopenfilename(initialdir="/home/dejko/Downloads/", title="Select A File", )
        master.wait_until(filepath, 30.0, 0.25) # filepath bude obsahovat celu cestu k zvolenemu suboru
        master._filepath = filepath
        label1 = tk.Label(self, text="Welcome to DEJOMAT", 
                          font=('Calibri', 18, "bold"))
        label1.pack(side="top", fill="x", pady=5)
        label2 = tk.Label(self, text="The file you have chosen to analyze: ", 
                          font=('Calibri', 12))
        label2.pack(side="top", fill="x", pady=20)
        message1 = tk.Message(self, text=str(master._filepath), width=900, 
                              font=('Calibri', 16, "bold"))
        message1.pack(side="top", fill="x", pady=5)
        label3 = tk.Label(self, text="", width=140)
        label3.pack(side="top", fill="x", pady=0)
        button1 = tk.Button(self, text="Start the analysis", command=lambda:self.start_analysis(master), 
                            font=('Calibri', 12))
        button1.pack(side="left", padx=120, pady=20)
        button2 = tk.Button(self, text="Choose different file", command=lambda:master.switch_frame(FileChosenScreen), 
                            font=('Calibri', 12))
        button2.pack(side="left", padx=40, pady=20)
        button3 = tk.Button(self, text="Quit", command=lambda:master.destroy(), 
                            font=('Calibri', 12))
        button3.pack(pady=20, padx=5)

        if filepath == "" or len(filepath) == 0:        #
            for widget in self.winfo_children():
                widget.destroy()                        
            label1 = tk.Label(self, text="Welcome to DEJOMAT", 
                              font=('Calibri', 18, "bold")) # Napis reprezentujuci nadpis obrazovky
            label1.pack(side="top", fill="x", pady=5)   
            label2 = tk.Label(self, text="You may analyse any suspicious ELF executable file in your computer!", 
                              font=('Calibri', 12))         # Napis opisujuci dalsi krok pouzivatela
            label2.pack(side="top", fill="x", pady=(8, 12))
            label3 = tk.Label(self, text="After performing an analysis, we will classify the file as either benign or malware.", 
                              font=('Calibri', 12))         # Napis opisujuci dalsi krok pouzivatela
            label3.pack(side="top", fill="x", pady=(0,15))
            button1 = tk.Button(self, text="Choose file", command=lambda:master.switch_frame(FileChosenScreen), 
                                font=('Calibri', 12))       # Tlacidlo na spustenie volby suboru
            button1.pack(side="left", pady=15, padx=(170, 40))
            button2 = tk.Button(self, text="Quit", command=lambda:master.destroy(),  
                                font=('Calibri', 12))       # Tlacidlo na vypnutie aplikacie
            button2.pack(side="left", pady=15, padx=60)
        
    def start_analysis(self, master):
        feature_vector = static_analysis(master._filepath)
        master.wait_until(feature_vector, 5, 0.25)
        if (feature_vector == 2):
            showinfo("Wrong file type","Wrong type of file! Only ELF executables")
            master.switch_frame(StartingScreen)
        else:
            showinfo("Analysis started", "Your analysis has started, please wait about 2 to 3 minutes to see the result")
            detected_calls = dynamic_analysis(master._filepath)
            master.wait_until_dynamic(detected_calls, 150, 10)
            dynamicke_spracovanie(detected_calls, feature_vector)
            prediction = predict(feature_vector)
        if prediction == 0:
            master.switch_frame(FileIsBenignScreen)
        else:
            master.switch_frame(FileIsMalwareScreen)
    
    def continue_analysis(self, master):
        detected_system_calls = dynamic_analysis(master._filepath)
        dynamicke_spracovanie(detected_system_calls, master._feature_vector)
        return True
        
# Zaverecna obrazovka v pripade, ak bol zvoleny subor vyhodnoteny ako bezpecny     
class FileIsBenignScreen(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        label1 = tk.Label(self, text="Welcome to DEJOMAT", font=('Calibri', 18, "bold"))
        label1.pack(side="top", fill="x", pady=5)
        label2 = tk.Label(self, text="Analysis finished successfully!", font=('Calibri', 12))
        label2.pack(side="top", fill="x", pady=20)
        label3 = tk.Label(self, text="The analyzed file appears to be safe!", fg="green", font=('Calibri', 16, "bold"))
        label3.pack(side="top", fill="x", pady=5)
        button1 = tk.Button(self, text="Choose different file", command=lambda:master.switch_frame(StartingScreen), font=('Calibri', 12))
        button1.pack(side="left", pady=15, padx=40)
        button2 = tk.Button(self, text="Quit", command=lambda:master.destroy(), font=('Calibri', 12))
        button2.pack(side="left", pady=15, padx=20)

# Zaverecna obrazovka v pripade, ak bol zvoleny subor vyhodnoteny ako malver
class FileIsMalwareScreen(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        label1 = tk.Label(self, text="Welcome to DEJOMAT", font=('Calibri', 18, "bold"))
        label1.pack(side="top", fill="x", pady=5)
        label2 = tk.Label(self, text="Analysis finished successfully!", font=('Calibri', 12))
        label2.pack(side="top", fill="x", pady=20)
        label3 = tk.Label(self, text="The analyzed file resembles MALWARE!", fg="red", font=('Calibri', 16, "bold"))
        label3.pack(side="top", fill="x", pady=1)
        label4 = tk.Label(self, text="It is advised not to execute it, proceed with caution.", fg="red", font=('Calibri', 14, "bold"))
        label4.pack(side="top", fill="x", pady=5)
        button1 = tk.Button(self, text="Choose different file", command=lambda:master.switch_frame(StartingScreen), font=('Calibri', 12))
        button1.pack(side="left", pady=12, padx=90)
        button2 = tk.Button(self, text="Quit", command=lambda:master.destroy(), font=('Calibri', 12))
        button2.pack(side="left", pady=12, padx=25)
        
        
if __name__ == "__main__":
    DejoMAT = DejoMAT()
    DejoMAT.mainloop() # mainloop zabezpecuje chod grafickeho rozhrania tkinter
